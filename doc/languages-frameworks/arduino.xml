<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="sec-arduino">

  <title>Arduino</title>
  <para>
    The Arduino IDE can build software for and flash it to a variety
    of microcontroller boards. Over one thousand code libraries are
    available for inclusion in Arduino projects. Using Nixpkgs, you
    can declare the boards and libraries you need for your project,
    and easily create different Arduino configurations for different
    projects.
  </para>
  <section xml:id="arduino-variations">
    <title>Arduino Variations</title>
    <para>
      Nixpkgs defines three variations of the Arduino IDE. The
      following are attributes belonging to the
      <varname>pkgs</varname> set:
      <variablelist>
        <varlistentry>
          <term><varname>arduino</varname></term>
          <listitem>
            <para>
	      The latest stable version of the Arduino IDE.
	    </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>arduino-core</varname></term>
          <listitem>
            <para>
              The Arduino IDE tools and libraries, without the
              graphical environment. If you use GNU make or another
              software construction tool to build your projects, this
              package is probably what you're looking for. Both
              <varname>arduino</varname> and
              <varname>arduino-core</varname> contain a program called
              <varname>arduino-builder</varname>, which can compile
              projects from the command line.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>teensyduino</varname></term>
          <listitem>
            <para>
              The graphical version of the Arduino IDE with
              proprietary patches for the Teensy Development boards.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </section>

  <section xml:id="adding-arduino-packages">
    <title>Adding Packages to Arduino</title>
    <para>
      While running the Arduino IDE from Nixpkgs, you can use its
      Boards Manager and Libraries Manager as usual, and it will
      install boards and libraries in your user home directory, but
      the toolchains for boards which do not use the default AVR tools
      will not work because they will be unable to find their runtime
      dependencies.
    </para>
    <para>
      You can also declare the set of Arduino boards
      and libraries using derivations from Nixpkgs. The rest of this
      section discusses declarative installation of Arduino boards and
      libraries using Nix and Nixpkgs.
    </para>
    <para>
      The first step to declare the list of packages you want in your
      Arduino installation is to create a dedicated derivation. This
      can be done in a file such as:

      <example xml:id="ex-arduinoNix">
        <title>Nix expression to build Arduino with packages (<filename>arduino.nix</filename>)</title>
        <programlisting language="nix">
/*
This is a Nix expression to build Arduino with some Arduino packages
which might be useful for a low-power radio project, on any
distribution where Nix is installed. This will install all the
dependencies from the nixpkgs repository and build the binary files
without interfering with the host distribution.

To build the project, type the following from the current directory:

$ nix-build arduino.nix

To run the newly compiled executable:

$ ./result/bin/arduino
*/
{ pkgs ? import &lt;nixpkgs&gt; {} }: <co xml:id="ex-arduinoNix-1" />
pkgs.arduinoWithPackages <co xml:id="ex-arduinoNix-2" /> (apkgs : with apkgs; [
  moteino
  lowpowerlab-lowpower
  lowpowerlab-rfm69
  lowpowerlab-spiflash
]) <co xml:id="ex-arduinoNix-3" />
	</programlisting>
      </example>
      <calloutlist>
        <callout arearefs="ex-arduinoNix-1">
          <para>
            The first non-comment line in this file
            (<literal>{ pkgs ? ... }</literal>)
            indicates that the whole file represents a function.
          </para>
        </callout>

        <callout arearefs="ex-arduinoNix-2">
          <para>
	    This adds boards and libraries to the Arduino IDE.
	    In addition to the Arduino IDE, packages can also be added to the non-GUI
	    core of Arduino using <varname>arduinoCoreWithPackages</varname> and to
	    the Teensyduino variation using <varname>teensyduinoWithPackages</varname>.
          </para>
        </callout>

        <callout arearefs="ex-arduinoNix-3">
          <para>
            The list contains the packages to install. In the
            example, one package containing board definitions,
            (<varname>moteino</varname>) and three libraries,
            (<varname>lowpowerlab-lowpower</varname>,
            <varname>lowpowerlab-rfm69</varname> and
            <varname>lowpowerlab-spiflash</varname>) are included.
          </para>
        </callout>
      </calloutlist>
    </para>
    <para>
      The result of this configuration will be an
      <command>arduino</command> command which launches the Arduino IDE with your
      chosen boards in the Boards Manager and chosen libraries in the Library Manager.
    </para>

    <para>
      You can check that it works by executing this in a terminal:

      <screen>
	$ nix-build arduino.nix
	$ ./result/bin/arduino
      </screen>

      Using the resulting Arduino IDE, try to change the board used
      for your sketch, or choose a library to include in it, and you
      will see your list of boards and libraries on the IDE's menus.
    </para>

    <para>
      The (quite long) list of available boards and libraries can be seen with the
      following command:
      <programlisting><![CDATA[
      nix-env -f "<nixpkgs>" -qaP -A arduinoPackages
      ]]></programlisting>
    </para>

    <para>
      If you are on NixOS, you can install this particular Arduino for
      all users by adding it to the list of system packages
      (see <link xlink:href="http://nixos.org/nixos/#sec-declarative-package-mgmt"></link>). Simply
      modify your file <filename>configuration.nix</filename> to
      make it contain:
      <example>
        <title>Custom Arduino in <filename>configuration.nix</filename></title>
        <programlisting><![CDATA[
{
environment.systemPackages = [
...
(import /path/to/arduino.nix { inherit pkgs; })
];
}
]]></programlisting>
      </example>
    </para>

    <para>
      In this case, the next <command>nixos-rebuild switch</command>
      will take care of adding your <command>arduino</command> to the
      <varname>PATH</varname> environment variable
      (see <link xlink:href="http://nixos.org/nixos/#sec-changing-config">Nixos manual</link>).
    </para>

    <para>
      If you are not on NixOS or want to install this particular
      Arduino only for yourself, you can do so by adding it to your
      <filename>~/.config/nixpkgs/config.nix</filename>
      (see <xref linkend="sec-modify-via-packageOverrides"/>):
      <example>
        <title>Custom Arduino in <filename>~/.config/nixpkgs/config.nix</filename></title>
        <programlisting><![CDATA[
{
  packageOverrides = super: let self = super.pkgs; in {
    myArduino = import /path/to/arduino.nix { pkgs = self; };
  };
}
]]></programlisting>
      </example>
    </para>

    <para>
      In this case, the next
      <literal>nix-env -f '&lt;nixpkgs&gt;' -iA myArduino</literal>
      will take care of adding your customized Arduino to the
      <varname>PATH</varname> environment variable.
    </para>
  </section>
  <section xml:id="packaging-arduino-libraries">
    <title>How to package Arduino libraries</title>
    <para>If you have written an Arduino library and would like to
    write a package for it, or would like to package an Arduino
    library which is not included in Nixpkgs, you can use the
    <varname>arduino.libraryDerivation</varname> function to create
    one. For example, here is a package definition for a library
    stored locally:
    </para>
    <example xml:id="ex-libPkg">
      <title>Nix package definition for an Arduino library</title>
      <programlisting>
{ stdenv, arduino }:

arduino.libraryDerivation {
  name = "my-library-0.0.1";
  libraryName = "my-library"; <co xml:id="ex-libPkg-1" />
  src = ./arduino-libraries/my-library; <co xml:id="ex-libPkg-2" />
  meta = with stdenv.lib; {
    ...
  };
}
      </programlisting>
    </example>
    <calloutlist>
      <callout arearefs="ex-libPkg-1">
        <para>
          The <varname>libraryName</varname> will be used both as the
          name of the library on the menus of the Arduino application,
          and as the name of the directory within the Arduino
          application where the library source is found.
        </para>
      </callout>

      <callout arearefs="ex-libPkg-2">
        <para>
	  In addition to source stored locally, other means of
	  fetching source code may be used, such as
	  <varname>fetchurl</varname> and
	  <varname>fetchFromGitHub</varname>.
        </para>
      </callout>
    </calloutlist>

  </section>
  <section xml:id="packaging-arduino-boards">
    <title>Packaging Arduino board definitions</title>
    <para>Packaging board definitions for Arduino may be a simple
    task, if the boards in question reuse the default AVR toolchain,
    or it may be more complex if the boards use a different
    toolchain. Either way, see
    &lt;<filename>nixpkgs/pkgs/top-level/arduino-packages.nix</filename>&gt;
    for examples.</para>
  </section>

</section>
